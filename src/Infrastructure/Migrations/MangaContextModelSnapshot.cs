// <auto-generated />
using System;
using Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(MangaContext))]
    partial class MangaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Infrastructure.DataAccess.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Account");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4c510cfe-5d61-4a46-a3d9-c4313426655f"),
                            CustomerId = new Guid("197d0438-e04b-453d-b5de-eca05960c6ae")
                        });
                });

            modelBuilder.Entity("Infrastructure.DataAccess.Entities.Credit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Credit");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f5117315-e789-491a-b662-958c37237f9b"),
                            AccountId = new Guid("4c510cfe-5d61-4a46-a3d9-c4313426655f"),
                            Amount = 400m,
                            TransactionDate = new DateTime(2020, 7, 24, 23, 47, 34, 909, DateTimeKind.Utc).AddTicks(9410)
                        });
                });

            modelBuilder.Entity("Infrastructure.DataAccess.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Customer");

                    b.HasData(
                        new
                        {
                            Id = new Guid("197d0438-e04b-453d-b5de-eca05960c6ae"),
                            Name = "Ivan Paulovich",
                            SSN = "8608179999"
                        });
                });

            modelBuilder.Entity("Infrastructure.DataAccess.Entities.Debit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Debit");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3d6032df-7a3b-46e6-8706-be971e3d539f"),
                            AccountId = new Guid("4c510cfe-5d61-4a46-a3d9-c4313426655f"),
                            Amount = 400m,
                            TransactionDate = new DateTime(2020, 7, 24, 23, 47, 34, 910, DateTimeKind.Utc).AddTicks(2750)
                        });
                });

            modelBuilder.Entity("Infrastructure.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("ExternalUserId")
                        .HasColumnType("text");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.HasKey("ExternalUserId", "CustomerId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            ExternalUserId = "Ivan Paulovich",
                            CustomerId = new Guid("197d0438-e04b-453d-b5de-eca05960c6ae")
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
